import os, subprocess

def find_workflow_path():
    result = subprocess.run(["find", ".", "-type", "d", "-name", "Snakemake-workflow-for-RAxML-NG-based-phylogenetic-analysis"], capture_output=True, text=True)
    return result.stdout.strip('\n')

configfile: re.sub("\s+","", str(find_workflow_path() + "/config/config.yaml") )

seqs = {f for f in os.listdir(".") if f.endswith((".fasta", ".fa", ".faa"))}


rule all:
    input:
        "all_genes.trimmed.aln.phy.raxml.support.tree",
        "all_genes.trimmed.aln.phy.raxml.support.tree.svg"

rule concatenate:
    input: seqs=seqs
    output: all_fasta="all_genes.fasta"
    shell: """ cat {input.seqs} > {output.all_fasta} """

rule mafft:
    input: all_fasta="all_genes.fasta"
    output: aln="all_genes.aln"
    conda: "envs/phylo.yaml"
    shell: "mafft --auto {input.all_fasta} > {output.aln}"

rule trimal:
    input: aln="all_genes.aln"
    output: trm="all_genes.aln.trimmed"
    params: thr=config['trimal_threshold']
    conda: "envs/phylo.yaml"
    shell: """ trimal -in {input.aln} 
    	       	      -out {output.trm} 
		      -fasta 
		      -gt {params.thr} """
rule convert:
    input: trm="all_genes.aln.trimmed"
    output: phy="all_genes.aln.trimmed.phy"
    message: "Converting trimmed alignment to phy"
    shell: "python3 scripts/ETElib.py --alignment {input.trm}"


rule pythia:
    input: phy="all_genes.aln.trimmed.phy"
    output: "all_genes.aln.pythia.out"
    conda: "envs/phylo.yaml"
    shell: """ pythia --msa {input.phy} 
    	   	   -r raxml-ng 
		   --removeDuplicates 
		   -o {output} """

rule model_test:
    input: phy="all_genes.aln.trimmed.phy", pythia="all_genes.aln.pythia.out"
    output: "all_genes.trimmed.aln.phy.raxml.bestModel"
    params: type=config['type']
    conda: "envs/phylo.yaml"
    shell: """ modeltest-ng -i {input.phy} 
    	   		 -d {params.type} 
			 -t ml 
			 -c 
			 -T raxml """

rule raxml:
    input: pythia="all_genes.aln.pythia.out",
           modeltest="all_genes.trimmed.aln.phy.raxml.bestModel"
    output: "all_genes.trimmed.aln.phy.raxml.support"
    threads: config['raxmlng_threads']
    conda: "envs/phylo.yaml"
    params:
        rtn=config['random_tree_number'],
        ptn=config['parsimony_tree_number'],
        outgroup=config['outgroup']

    shell: """ best_model=$(sed 's/.{{.*//g' all_genes.trimmed.aln.phy.raxml.bestModel)
    	       raxml-ng --all \
               		--msa all_genes.aln.trimmed.phy \
			--model $best_model \
			--tree rand{{params.rtn}}, pars{{params.ptn}} \
			--threads {threads} \
			--workers auto \
			{{("--outgroup " + {params.outgroup}) if {params.outgroup} else ""}} """

rule midpoint_root:
    input: "all_genes.trimmed.aln.phy.raxml.support"
    output: "all_genes.trimmed.aln.phy.raxml.support.tree"
    run:
        if not config['outgroup']:
            subprocess.run(["python3", "scripts/ETElib.py", "--tree", "all_genes.trimmed.aln.phy.raxml.support", "--midpoint"])
        else:
            subprocess.run(["cp", "all_genes.trimmed.aln.phy.raxml.support", "all_genes.trimmed.aln.phy.raxml.support.tree"])


rule visualize_tree:
    input: "all_genes.trimmed.aln.phy.raxml.support.tree"
    output: "all_genes.trimmed.aln.phy.raxml.support.tree.svg"
    shell: """ python3 scripts/ETElib.py --tree {input} --visualize """
