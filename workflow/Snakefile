import os
import re
import subprocess

##=============================================================== Snakemake Utils Functions =====================================================================###

def is_docker() -> bool:
    with open('/proc/self/cgroup', 'r') as procfile:
        result = subprocess.run(["grep", "container"], stdin=procfile, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        if result.returncode == 0:
            return True
        else:
            return False

    return False


def find_repository_name(start_dir="."):
    current_dir = os.path.abspath(start_dir)

    while current_dir != '/':  # Stop searching at the root directory
        result = subprocess.run(["find", current_dir, "-type", "f", "-name", "Snakefile"], capture_output=True, text=True)

        if result.stdout:
            snakefiles = result.stdout.strip().split('\n')
            if len(snakefiles) == 1:
                return snakefiles[0]
            else:
                print("Multiple repositories identified:")
                for snakefile in snakefiles:
                    print(f"- {snakefile}")

        current_dir = os.path.dirname(current_dir)

    # Of course, if a different path is provided with the --snakefile argument, this will be used by Snakemake
    return None  # Return None if no Snakefile or snakefile is found


def find_workflow_path(dir="."):
    home_directory = os.path.expanduser("~")
    repository_name = find_repository_name(dir)
    result = subprocess.run(["find", home_directory, "-type", "d", "-name", repository_name], capture_output=True, text=True)
    return result.stdout


###=============================================================== Snakemake Pipeline =========================================================================###

if is_docker():
     configfile: str( re.sub ("workflow.*","", find_repository_name(start_dir=".")) ) + "/config/config.yaml"
else:
     configfile: str( find_workflow_path(dir=".")) + "config/config.yaml"


seqs = {f for f in os.listdir(".") if f.endswith((".fasta", ".fa", ".faa"))}

rule all:
    input:
        "all_genes.trimmed.aln.phy.raxml.support.tree",
        "all_genes.trimmed.aln.phy.raxml.support.tree.svg"

rule concatenate:
    input: seqs=seqs
    output: all_fasta="all_genes.fasta"
    shell: """ cat {input.seqs} > {output.all_fasta} """

rule mafft:
    input: all_fasta="all_genes.fasta"
    output: aln="all_genes.aln"
    conda: "envs/phylo.yaml"
    shell: "mafft --auto {input.all_fasta} > {output.aln}"

rule trimal:
    input: aln="all_genes.aln"
    output: trm="all_genes.aln.trimmed"
    params: thr=config['trimal_threshold']
    conda: "envs/phylo.yaml"
    shell: """ trimal -in {input.aln} \
    	       	      -out {output.trm} \ 
		      -fasta \
		      -gt {params.thr} """
rule convert:
    input: trm="all_genes.aln.trimmed"
    output: phy="all_genes.aln.trimmed.phy"
    message: "Converting trimmed alignment to phy"
    shell: "python3 ETElib.py --alignment {input.trm}"


rule pythia:
    input: phy="all_genes.aln.trimmed.phy"
    output: "all_genes.aln.pythia.out"
    conda: "envs/phylo.yaml"
    shell: """ pythia --msa {input.phy} \
       	   	      -r raxml-ng \
		      --removeDuplicates \
		      -o {output} """

rule model_test:
    input: phy="all_genes.aln.trimmed.phy", pythia="all_genes.aln.pythia.out"
    output: "all_genes.trimmed.aln.phy.raxml.bestModel"
    params: type=config['type']
    conda: "envs/phylo.yaml"
    shell: """ modeltest-ng -i {input.phy} \ 
    	       		    -d {params.type} \ 
			    -t ml \
			    -c \
			    -T raxml """

rule raxml:
    input: pythia="all_genes.aln.pythia.out",
           modeltest="all_genes.trimmed.aln.phy.raxml.bestModel"
    output: "all_genes.trimmed.aln.phy.raxml.support"
    threads: config['raxmlng_threads']
    conda: "envs/phylo.yaml"
    params:
        rtn=config['random_tree_number'],
        ptn=config['parsimony_tree_number'],
        outgroup=config['outgroup']

    shell: """ best_model=$(sed 's/.{{.*//g' all_genes.trimmed.aln.phy.raxml.bestModel)
    	       raxml-ng --all \
               		--msa all_genes.aln.trimmed.phy \
			--model $best_model \
			--tree rand{{params.rtn}}, pars{{params.ptn}} \
			--threads {threads} \
			--workers auto \
			{{("--outgroup " + {params.outgroup}) if {params.outgroup} else ""}} """

rule midpoint_root:
    input: "all_genes.trimmed.aln.phy.raxml.support"
    output: "all_genes.trimmed.aln.phy.raxml.support.tree"
    run:
        if not re.search ("\w", config['outgroup']):
            subprocess.run(["python3", "ETElib.py", "--tree", "all_genes.trimmed.aln.phy.raxml.support", "--midpoint"])
        else:
            subprocess.run(["cp", "all_genes.trimmed.aln.phy.raxml.support", "all_genes.trimmed.aln.phy.raxml.support.tree"])


rule visualize_tree:
    input: "all_genes.trimmed.aln.phy.raxml.support.tree"
    output: "all_genes.trimmed.aln.phy.raxml.support.tree.svg"
    shell: """ python3 ETElib.py --tree {input} --visualize """
