#' This function flips a phylogenetic tree based on the specified descendant nodes. It can flip internal nodes or leaves, if the node is terminal.
#'
#' @param tree An object representing the phylogenetic tree. Should be of class 'treedata' or 'phylo'.
#' @param node1 The first node for flipping.
#' @param node2 The second node for flipping.
#'
#' @return A 'phylo' object with flipped nodes.
#'
#' @examples
#' \dontrun{
#' # Load a sample tree
#' tree <- read_tree("path/to/tree.nwk")
#'
#' # Use node_ids to identify the nodes you want to flip, ideally with a pattern matching a leaf of interest.
#' node_ids(tree)
#'
#' # Flip nodes 5 and 8 in the tree
#' flipped_tree <- flip_node(tree, 5, 8)
#' }
#'
#' @export
flip_node <- function(tree, node1, node2) {
return(as.phylo(flip(ggtree(tree), node1, node2)))
}
#' Group all descendant branches of specified node(s) in a phylogenetic tree.
#'
#' This function groups all descendant branches of the specified node(s) in a phylogenetic tree.
#'
#' @param tree An object representing the phylogenetic tree. Should be of class 'treedata' or 'phylo'.
#' @param node1 The first node for grouping descendants.
#' @param node2 The second node for grouping descendants.
#' @param node3 The third node for grouping descendants.
#' @param node4 The fourth node for grouping descendants.
#'
#' @return A 'phylo' object with grouped descendants.
#'
#' @examples
#' \dontrun{
#' # Load a sample tree
#' tree <- read_tree("path/to/tree.nwk")
#'
#' # Group all descendants of nodes 5, 8, and 10 in the tree
#' grouped_tree <- group_descendants(tree, 5, 8, 10)
#' }
#'
#' @export
#' @export
#' @export
#' @export
# Function to group all descendant branches of node(s)
group_descendants <- function(tree, node1, node2 = "", node3 = "", node4 = "") {
return(groupClade(tree, .node = c(node1, node2, node3, node4)))
}
#' Extract Subtree
#'
#' Function to extract a subtree by finding the MRCA (Most Recent Common Ancestor) of two anchor nodes while preserving branch lengths and bootstrap values.
#'
#' @param tree A phylogenetic tree object of class 'phylo' or 'treedata'.
#' @param tip1 The label or pattern of the first tip node.
#' @param tip2 The label or pattern of the second tip node.
#' @param branch_length Logical. If TRUE, preserve branch lengths in the extracted subtree; if FALSE, create a cladogram with equal branch lengths.
#'
#' @return A treedata object representing the extracted subtree with preserved branch lengths and bootstrap values.
#'
#' @examples
#' # Extract a subtree preserving branch lengths and bootstrap values
#' tree <- read.tree("path/to/your/treefile.newick")
#' subtree <- extract_subtree(tree, "species_A", "species_B", branch_length = TRUE)
#' visualize_tree(subtree)
#'
#' # Extract a cladogram with equal branch lengths
#' tree <- read.tree("path/to/your/treefile.newick")
#' cladogram <- extract_subtree(tree, "species_A", "species_B", branch_length = FALSE)
#' visualize_tree(cladogram)
#'
#' @seealso
#' \code{\link{visualize_tree}} for visualizing phylogenetic trees.
#' \code{\link{findMRCA}} for finding the Most Recent Common Ancestor (MRCA) of multiple nodes.
#'
#' @importFrom dplyr left_join select mutate as_tibble
#' @importFrom ape extract.clade
#' @importFrom phytools findMRCA
#' @importFrom treeio as.treedata read.newick
#'
#' @export
# Function to extract a subtree by finding the MRCA of two anchor nodes while preserving branch lengths and bootstrap values
extract_subtree <- function(tree, tip1, tip2, branch_length = TRUE) {
if (is(tree,"phylo")) {
tree_obj <- treeio::as.treedata(tree)
} else if (is(tree,"treedata")) {
tree_obj <- tree
} else {
stop("Input tree is not of class treedata or phylo. Please use the read_tree function to read input file.")
}
# Append bootstrap values in the label section, in the nodes which are NOT tips
# The bootstrap values will be kept there and transferred along with the labels in the new node numbering of the subtree
phylo_data <- as.treedata(left_join(as_tibble(tree_obj@phylo), as_tibble(tree_obj@data)) %>%
mutate(isTip = ifelse(!is.na(label), TRUE, FALSE)) %>%
mutate(label = ifelse(isTip == FALSE, as.character(support), label)) %>%
select(-support)
)
t <- Preorder(phylo_data@phylo)
# If option for branch length is not TRUE, make branch lengths NULL
if (!(branch_length == TRUE | branch_length == T)) {
print("Option branch length is deactivated. As a result, the subtree will be extracted as a cladogram with equal branch lengths.")
t$edge.length <- NULL
}
# Extract subtree based on anchor tip labels and/or patterns
tip1m <- t$tip.label[grepl(tip1, t$tip.label)]
tip2m <- t$tip.label[grepl(tip2, t$tip.label)]
if (any(sapply(list(tip1m, tip2m), function(x) is.null(x)))) {
stop("Provided tip labels are NULL or were not found among tree tip labels.")
} else if (any(sapply(list(tip1m, tip2m), function(x) length(x) > 1 ))) {
stop("Provided tip names are not unique.")
}
subtree <- ape::extract.clade(t, node = phytools::findMRCA(t, c(tip1m, tip2m)))
# If node is NOT tip, add the labels in the bs_support column and make the labels NA - mapping according to new node numbering
subtree_f <- as.treedata(subtree) %>%
mutate(bs_support = ifelse(isTip == FALSE, label, NA)) %>%
mutate(label = ifelse(isTip == FALSE, NA, label))
# To create an object compatible with visualize_tree, initialize the 'node' and 'support' columns in the data slice of the treedata class
subtree_f@data <- tibble(
node = rep(NA, length = length(subtree_f@extraInfo$node)),
support = rep(NA, length = length(subtree_f@extraInfo$bs_support))
)
# ... and the add the node number and bs_support values
subtree_f@data <- tibble(
node = subtree_f@extraInfo$node,
support = as.numeric(subtree_f@extraInfo$bs_support)
)
return ( subtree_f )
}
#==================================== TREE VISUALIZATION FUNCTIONS ====================================#
#' Highlight Tree Nodes
#'
#' Function to highlight nodes on a phylogenetic tree.
#'
#' @param tree A phylogenetic tree object of class 'phylo' or a file path to a tree file (e.g., in Newick format).
#' @param highlight_nodes A list or vector of node labels or patterns to highlight on the tree.
#' @param colors A vector of colors corresponding to the highlight nodes. If not provided, random colors will be assigned.
#' @param layout A character string specifying the layout of the tree. Options include "rectangular", "circular", etc.
#' @param name A character string specifying the name for the highlighted plot.
#'
#' @return A ggtree object with highlighted nodes.
#'
#' @examples
#' # Highlight specific nodes with random colors
#' tree <- read.tree("path/to/your/treefile.newick")
#' highlight_tree(tree, c("species_A", "species_B"))
#'
#' # Highlight specific nodes with specified colors
#' tree <- read.tree("path/to/your/treefile.newick")
#' highlight_tree(tree, c("species_A", "species_B"), colors = c("red", "blue"))
#'
#' @seealso
#' \code{\link{visualize_tree}} for visualizing phylogenetic trees.
#'
#' @importFrom ggtree ggtree geom_hilight
#' @importFrom ggplot2 ggstar scale_starshape_identity scale_fill_manual ggsave
#' @importFrom treeio read.newick
#'
#' @export
# Function to highlight nodes on a tree
highlight_tree <- function(tree, highlight_nodes, colors = NULL, layout = "circular", name = NULL, ...) {
# Check if highlight_nodes is a list or a vector
if (is.list(highlight_nodes)) {
# It's a list, create a data frame with random colors
if (is.null(colors)) {
# Generate random colors if colors are not provided
highlight <- data.frame(
Groups = names(highlight_nodes),
Label = highlight_nodes,
Color = sample(colors(), length(highlight_nodes))
)
} else {
# Use provided colors
highlight <- data.frame(
Groups = names(highlight_nodes),
Label = highlight_nodes,
Color = colors
)
}
} else if (is.vector(highlight_nodes)) {
# It's a vector, create a data frame with provided colors or generate random colors
if (is.null(colors)) {
# Generate random colors if colors are not provided
highlight <- data.frame(
Groups = NULL,  # You can specify the groups if needed
Label = highlight_nodes,
Color = sample(colors(), length(highlight_nodes))
)
} else {
# Use provided colors
highlight <- data.frame(
Groups = NULL,  # You can specify the groups if needed
Label = highlight_nodes,
Color = colors
)
}
} else {
stop("highlight_nodes must be either a list or a vector.")
}
# Create the ggtree plot
if (any(grepl(".newick|.nwk|.tre|.support|.nxs|.nex", tree))) {
x <- read_tree(tree)
tree <- ggtree(x, layout = layout) +
geom_star(aes(subset = isTip, starshape = "circle"), fill = "lightgrey", size = 0.8) +
scale_starshape_identity() + scale_fill_identity()
} else {
tree <- ggtree(tree, layout = layout) +
geom_star(aes(subset = isTip, starshape = "circle"), fill = "lightgrey", size = 0.8) +
scale_starshape_identity() + scale_fill_identity()
}
# Highlight the nodes
if (!is.null(highlight$Groups)) {
treef <- tree + geom_hilight(
data = highlight,
aes(node = Label, fill = Groups),
alpha = 0.3, extend = 0.10, linetype = 1, linewidth = 0.9,
colour = "black", show.legend = TRUE
) + scale_fill_manual(values = highlight$Color)
} else {
treef <- tree + geom_hilight(
data = highlight,
aes(node = Label, fill = highlight$Color),
alpha = 0.3, extend = 0.10, linetype = 1, linewidth = 0.9,
colour = "black", show.legend = TRUE
)
}
# Save the highlighted plot
if (exists("treef")) {
if (any(grepl(".newick|.nwk|.tre|.support|.nxs|.nex", tree))) {
ggsave(plot = treef, sprintf("%s_highlighted.svg", sub(".nwk|.tre", "", tree)), dpi = 600)
sprintf("Tree plotted and saved as %s_highlighted.svg", sub(".nwk|.tre", "", tree))
} else {
ggsave(plot = treef, "tree_plot_highlighted.svg", dpi = 600)
print("Tree plotted and saved as tree_plot_highlighted.svg!")
}
return(treef)
}
}
#' Function to visualize a tree with a wide variety of options and customizable features
#' Reference taxons should be defined as reference = 'taxon_ID'.
#'
#' @param tree Phylogenetic tree in Newick format, treedata, or phylo class object.
#' @param form Layout of the tree (e.g., "rectangular").
#' @param tiplabels Logical. Print tip labels on the tree.
#' @param pattern_id Pattern to match tip labels for printing.
#' @param bootstrap_numbers Logical. Display bootstrap values on branches.
#' @param bootstrap_number_nudge_y Numeric. Controls the relative height of the bootstrap number on top of the branch.
#' @param bootstrap_circles Logical. Display bootstrap values as circles on branches.
#' @param bootstrap_legend Logical. Display legend for bootstrap circles.
#' @param color Vector specifying tip color mappings.
#' @param shape Vector specifying tip shape mappings.
#' @param mappings_legend Logical. Display legend for color and shape mappings.
#' @param tip_label_size Numeric. Size of tip labels.
#' @param tip_shape_size Numeric. Size of tip shapes.
#' @param clades Vector of node IDs to label.
#' @param labels Vector of labels for the specified clades.
#' @param save Logical. Save the plot.
#' @param output Character. Output file name if saving the plot.
#' @param interactive Logical. Generate an interactive plot using plotly.
#' @param ... Additional parameters for customizing the plot.
#'
#' @return A ggplot or ggplotly object representing the visualized tree.
#'
#' @examples
#' \dontrun{
#' # Load required libraries
#' library(ggplot2)
#' library(ggtree)
#'
#' # Example: Visualize a tree with bootstrap values as circles and custom colors
#' visualize_tree(tree, form = "rectangular", bootstrap_circles = TRUE,
#'                color = c(species1 = "red", species2 = "blue"))
#' }
#'
#' @seealso \code{\link[ggtree]{ggtree}}, \code{\link[ggtree]{geom_tiplab}},
#' \code{\link[ggtree]{geom_nodelab}}, \code{\link[ggtree]{geom_cladelab}},
#' \code{\link[ggplot2]{ggstar}}, \code{\link[ggplot2]{theme_tree}}, \code{\link[ggsave]{ggsave}},
#' \code{\link[plotly]{ggplotly}}
#'
#' @importFrom ggplot2 aes theme ggstar ggsave
#' @importFrom ggtree ggtree geom_tiplab geom_nodelab geom_cladelab theme_tree
#' @importFrom plotly ggplotly
#'
#' @export
# Function to visualize a tree with a wide variety of options and customizable features
# Reference taxons should be defined as reference = 'taxon_ID'.
visualize_tree <- function(tree, form = "rectangular", tiplabels = FALSE, pattern_id = NULL,
bootstrap_numbers = TRUE, bootstrap_number_nudge_y = 3.2, bootstrap_circles = FALSE, bootstrap_legend = FALSE,
color = NULL, shape = NULL, mappings_legend = FALSE, tip_label_size = 2, tip_shape_size = 3,
clades = NULL, labels = NULL,
save = TRUE, output = NULL, interactive = FALSE, ...) {
# Open phylogenetic tree file and/or object
if (typeof(tree) == "character") {
if (file.exists(tree)) {
if (any(grepl(".newick|.nwk|.tre|.support|.nxs|.nex", tree))) {
tree_obj <- read_tree(tree)
} else {
stop ("Provided file is not a newick or nexus file.")
}
}
} else if (is(tree,"treedata")) {
tree_obj <- tree
} else if (is(tree,"phylo")) {
tree_obj <- treeio::as.treedata(tree)
print (as_tibble(tree_obj), n = 1000)
} else {
stop ("Provided file is not a treedata, a phylo or a tibble_df object.")
}
tree_obj <- as.treedata (as_tibble(tree_obj) %>%
mutate(bs_color = case_when(support < 50 ~ "white",
support >= 50 & support < 75 ~ "grey",
support >= 75 ~ "black",
TRUE ~ "NA"  # Default case if none of the conditions are met
)
)
)
plot <- ggtree(tree_obj, layout = form)
# Manipulate bootstrap values
if ( bootstrap_numbers == TRUE && bootstrap_circles != TRUE ) {
if (any(!is.null(tree_obj@data$support)) && any(!is.na(tree_obj@data$support))) {
# bootstrap_number_nudge_y controls the relative height of the number on top of branch
# Use larger values as the size of the tree increases
plot <- plot + geom_nodelab(  mapping = aes(x = branch, label = support), nudge_y = bootstrap_number_nudge_y, size = 3)
} else {
print ("Bootstrap values do not exist.")
}
} else if ( bootstrap_numbers != TRUE && bootstrap_circles == TRUE ) {
if (any(!is.null(tree_obj@data$support)) && any(!is.na(tree_obj@data$support))) {
bootstrap_legend <- 'Legend'
plot <- plot + geom_nodelab(fill = tree_obj@data$bs_color,
color = ifelse(is.na(tree_obj@data$bs_color), "black", NA),
shape = 21, size = 1.7)
if (bootstrap_legend == TRUE) {
plot <- plot + theme_tree(legend.position = c(0.2, 0.2))
}
}
} else if ( bootstrap_numbers == TRUE && bootstrap_circles == TRUE ) {
stop ("bootstrap_numbers = TRUE (default) and bootstrap_circles = TRUE. Please select either bootstrap circles or bootstrap numbers option.")
} else {
print ("Both bootstrap_circles and bootstrap_numbers options are FALSE. Bootstrap values will not be printed.")
}
# Visualize phylogenetic tree with an option to select the printed tips, based on pattern
if (is.null(color) && is.null(shape) && is.null(clades) && is.null(labels) ) {
if (length(list(...)) > 0) {
stop("The 'reference' option can be used only if tip mappings are provided.")
}
# Tip labels == TRUE and tip mappings & reference options are incongruent.
# If you want to print some of the species labels as text, do not include them into the color and shape mapping vectors, and provide them as 'reference'
if (tiplabels == TRUE) {
if (is.null(pattern_id)) {
plot <- plot + geom_tiplab(size = tip_label_size) # Here default size is 1, because it will print all tip labels
print("Printing phylogenetic tree with all tip labels!")
} else {
if (any(grepl(pattern_id, tree@phylo$tip.label)) == TRUE) {
matching_labels <- tree@phylo$tip.label[grepl(pattern_id, tree@phylo$tip.label)]
matching_dict <- data.frame(
label = matching_labels,
matching_flag = TRUE
)
plot <- plot %<+% matching_dict
plot <- plot + geom_tiplab(aes(label = ifelse(matching_flag, label, "")), color = "black", size = tip_label_size)
cat("Printing phylogenetic tree plot with tip labels matching", pattern_id, "!\n")
} else {
if (is.null(pattern_id)) {
print ("Please enable tip label printing with tiplabels = TRUE.")
}
cat ("Provided", pattern_id, "was not found among tip labels! Printing phylogenetic tree plot without tip labels!")
plot <- plot
}
}
} else {
print ("Printing phylogenetic tree plot without tip labels!")
}
} else { # Visualize phylogenetic tree with color and shape mappings, and an option to print reference species as text
# Manipulate tip labels to generate species_names and isolate tip labels which match reference
if (tiplabels == TRUE) {
stop("The tip labels option can be used only if tip mappings are NOT provided.\n  Add pattern you want print as text using the 'reference' option.")
}
references <- list(...)
reference_args <- names(references)
if (length(reference_args) == 0) {
species_dict <- lapply(seq_along(tree_obj@phylo$tip.label), function(i) {
list(tip_label = tree_obj@phylo$tip.label[i], species = sub("_.*", "", tree_obj@phylo$tip.label[i]))
})
} else {
reference <- as.character(unlist(references))
if (any(grepl(reference, tree_obj@phylo$tip.label))) {
ref_species <- tree_obj@phylo$tip.label[which(sapply(tree_obj@phylo$tip.label, function(x) any(grepl(reference, x))))]
ref_dict <- data.frame(
label = ref_species,
reference_flag = TRUE
)
plot_ref <- plot %<+% ref_dict
plot <- plot_ref + geom_tiplab(aes(label = ifelse(reference_flag, label, "")), size = 2, color = "black")
non_ref_species <- setdiff(tree_obj@phylo$tip.label, ref_species)
species_dict <- lapply(non_ref_species, function(label) {
list(tip_label = label, species = sub("_.*", "", label))
})
} else {
print ("Provided 'reference' pattern was not found.")
species_dict <- lapply(tree_obj@phylo$tip.label, function(label) {
list(tip_label = label, species = sub("_.*", "", label))
})
}
}
if (length(species_dict) > 0) {
tip_labels <- sapply(species_dict, function(entry) entry$tip_label)
species_names <- sapply(species_dict, function(entry) entry$species)
mappings_legend = TRUE
if (!is.null(color) && !is.null(shape)) {
missing_species_color <- setdiff(unique(sapply(species_dict, function(entry) entry$species)), names(color))
if (length(missing_species_color) > 0) {
warning(paste("Color mapping not found for the following species: ", paste(missing_species_color, collapse = ", ")))
}
# Create data frames for tip colors and shapes
tip_colors_df <- data.frame(
label = tip_labels,
species_colors = species_names,
s_color = color[match(sapply(species_dict, function(entry) entry$species), names(color))]
)
# Check for missing species in color dataframe
missing_species_shape <- setdiff(unique(sapply(species_dict, function(entry) entry$species)), names(shape))
if (length(missing_species_shape) > 0) {
warning(paste("Shape mapping not found for the following species: ", paste(missing_species_shape, collapse = ", ")))
}
tip_shapes_df <- data.frame(
label = tip_labels,
species_shapes = species_names,
s_shape = shape[match(sapply(species_dict, function(entry) entry$species), names(shape))]
)
# Join data frames to create a unique mapping tibble
plot <- plot %<+% tip_colors_df
plot <- plot %<+% tip_shapes_df
plot <- plot + geom_star(mapping = aes( subset = isTip,
fill = ifelse(!is.na(species_colors), s_color, NA),
starshape = ifelse(!is.na(species_shapes), s_shape, NA)),
size = tip_shape_size, show.legend = mappings_legend) +
scale_fill_identity() +
scale_starshape_identity()
} else if ( !is.null(color) && is.null(shape)) {
tip_colors_df <- data.frame(
label = tip_labels,
species_colors = species_names,
s_color = color[match(sapply(species_dict, function(entry) entry$species), names(color))]
)
plot <- plot %<+% tip_colors_df
plot <- plot + geom_star(mapping = aes( subset = isTip & !is.na(s_color),
fill = ifelse(!is.na(species_colors), s_color, NA)),
starshape = "circle",
size = tip_shape_size, show.legend = mappings_legend) +
scale_fill_identity()
} else if ( is.null(color) && !is.null(shape)) {
tip_shapes_df <- data.frame(
label = tip_labels,
species_shapes = species_names,
s_shape = shape[match(sapply(species_dict, function(entry) entry$species), names(shape))]
)
plot <- plot %<+% tip_shapes_df
plot <- plot + geom_star(mapping = aes( subset = isTip & !is.na(s_shape),
starshape = ifelse(!is.na(species_shapes), s_shape, NA)),
fill = "black",
size = tip_shape_size, show.legend = mappings_legend) +
scale_starshape_identity()
}
} else {
stop("Provided tip mappings were not found.")
}
}
if (!is.null(clades) && !is.null(labels)) {
plot <- plot + geom_cladelab(node = clades, label = labels, align = TRUE, fill = 'white',
offset.text = labeldist, barsize = 0.9, offset.bar = 0.5, fontsize = fontsize)
} else if (!is.null(clades) && is.null(labels)) {
plot <- plot + geom_cladelab(node = clades, label = "", align = TRUE, fill = 'white',
offset.text = labeldist, barsize = 0.9, offset.bar = 0.5, fontsize = fontsize)
} else if (is.null(clades) && !is.null(labels)) {
plot <- plot + geom_cladelab(node = "", label = labels, align = TRUE, fill = 'white',
offset.text = labeldist, barsize = 0.9, offset.bar = 0.5, fontsize = fontsize)
}
# Export plot with provided options
if (exists("plot")) {
if (save == TRUE) {
if (is.null(output)) {
if (typeof(tree) == "character") {
if (file.exists(tree)) {
if (any(grepl(".newick|.nwk|.tre|.support|.nxs|.nex", tree))) {
ggsave(plot = plot, sprintf("%s_visualized.svg", sub(".newick|.nwk|.tre|.support|.nxs|.nex", "", tree)), dpi = 600)
message <- sprintf("Tree plotted and saved as %s_visualized.svg", sub(".newick|.nwk|.tre|.support|.nxs|.nex", "", tree))
print(message)
}
}
} else {
ggsave(plot = plot, "tree_plot_visualized.svg", dpi = 600)
print("Tree plotted and saved as tree_plot_visualized.svg!")
}
} else {
ggsave(plot = plot, output, dpi = 600)
print(paste("Tree plotted and saved as", output))
}
} else {
print("Plot will not be saved! Use the options save = TRUE and output = <OUTPUT_NAME> for saving the output plot.")
}
if (interactive == FALSE) {
return (plot)
} else {
return (plotly::ggplotly(plot))
}
}
}
roxygen2::roxygenise()
